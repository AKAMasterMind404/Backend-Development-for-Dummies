3. 

    Sending a basic response:

        const http = require('http') // Instance of http

        const server = http.createServer((req,res)=>{
            console.log('Server received something!');
        });

        server.listen(3000, 'localhost');

    With this, make a requst to the following url:

        localhost:3000/

    This will print: 'Server received something!'

    To send text, do the following:
    Under the createServer method write:

        res.setHeader('Content-Type', 'text/plain');
        // TO SPECIFY THE TYPE OF DATA

        res.write('Hello');

        res.end();

    Alternatively, to send html:

        res.setHeader('Content-Type','text/html');
        res.write('<h1>Hello</h1>');
        res.end()

    To load a website:

        const fs = require('fs')

        .
        .

        fs.readFile('.<relative-path-project>', err, data)=>{
            if(err){
                console.log(err);
            }
            else{
                res.write(data);
                res.end();
            }
        })

        Example code:

            const http = require('http');
            const fs = require('fs');

            const server = http.createServer((req,res)=>{
                console.log("Server!!");
                fs.readFile('./abc.html', (err, data)=>{
                    if(err){
                        console.log(err);
                    }
                    else{
                        res.write(data);
                    }
                    res.end();
                })
            });

            server.listen(3000, 'localhost',()=>{
                console.log("Listening on 3000");
            });

5. 
    Full code well understood:

        const http = require('http');
        const fs = require('fs');

        const server = http.createServer((req,res)=>{

            let siteName = './abc.html';

            switch(req.url){
                case '/about':
                    res.statusCode = 200;
                    siteName = './about.html';
                    break;
                case '/about-me':
                    res.statusCode = 301;
                    res.setHeader('Location','/about');
                    break;
                case '/home':
                    res.statusCode = 200;
                    siteName = './abc.html';
                    break;
                default:
                    res.statusCode = 404;
                    siteName = './error.html';
                    break;
            }

            console.log("Server!!");
            fs.readFile(siteName, (err, data)=>{
                if(err){
                    console.log(err);
                }
                else{
                    res.write(data);
                }
                res.end();
            })
        });

        server.listen(3000, 'localhost',()=>{
            console.log("Listening on 3000");
        });

    7. Redirection using express

            app.get('/about', (req, res)=>{
                res.sendFile('./about.html', {root: __dirname});
            });

            app.get('/about-me', (req, res)=>{
                res.status(301).redirect('Location','/about');
            });

        ## app.use

        Declared in the end after get methods
        Acts as default route if url not matched With
        any of the GET calls

            app.use((req,res)=>{
                res.sendFile('./error.html', {root: __dirname});
            })

        app.get VS app.use

        get specificies the path url pattern
        whereas use will work for any url pattern
        pointing to your server

8. 
    In order to use JSON objects with express apps,
    do: 

        const app = express();
        app.use(express.json());

9. 
    Queries and Parameters:
    
        app.get('/:param1', (req,res)=>{
            console.log(req.params.param1)
        })

        Url passed:
        '/users/?name=Atharv&age=21'

        console.log(req.query) // Gives a dictionary containing key value Parameters
        // Here: { "name":"Atharv", "age":21 }

11. Routers and Mounting

    Declare a route as follows:

        const userRouter = express.Router();
        app.use('/user', userRouter);

        userRouter
        .route('/')
        .get(getUser)
        .post(postUser)
        .delete(deleteUser)
        .patch(updateUser)

        userRouter.route('/:id').get(getUserById);

    What does this mean?
    Whenever the server detects a url starting with '/user',
    it will redirect the request to userRouter. The user Router
    will check for the url pattern as well as request method and
    trigger the appropriate function passed.

    Note that the '/' in the user route denotes '/user/'

    # req.body returning null?
    -> Add the following:
        
        app.use(bodyParser.urlencoded({ extended: false }))
        app.use(bodyParser.json())

    